<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-06-01T18:10:59-05:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Statistical Data Visualization</title><subtitle>These are notes from STAT 679 (Fall 2022) at UW Madison.</subtitle><entry><title type="html">Introduction to ggplot2</title><link href="http://localhost:4000/2022/06/01/week1-1.html" rel="alternate" type="text/html" title="Introduction to ggplot2" /><published>2022-06-01T00:00:00-05:00</published><updated>2022-06-01T00:00:00-05:00</updated><id>http://localhost:4000/2022/06/01/week1-1</id><content type="html" xml:base="http://localhost:4000/2022/06/01/week1-1.html"><![CDATA[<p><em>Design principles from the grammar of graphics.</em></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>library(tidyverse)
library(ggrepel)
library(scales)
library(dslabs)
</code></pre></div></div>

<ol>
  <li>
    <p>ggplot2 is an R implementation of the Grammar of Graphics. The idea
is to define the basic “words” from which visualizations are built,
and then let users compose them in original ways. This is in
contrast to systems with prespecified chart types, where the user is
forced to pick from a limited dropdown menu of plots. Just like in
ordinary language, the creative combination of simple building
blocks can support a very wide range of expression.</p>
  </li>
  <li>
    <p>We’re going to create this plot in these notes.</p>
  </li>
  <li>
    <p>Every ggplot2 plot is made from three components,</p>

    <ul>
      <li>Data: This is the data.frame that we want to visualize.</li>
      <li>Geometry: These are the types of visual marks that appear on the
plot.</li>
      <li>Aesthetic Mapping: This links the data with the visual marks.</li>
    </ul>
  </li>
  <li>
    <p><strong>Data</strong>. Each row is an observation, and each column is an
attribute that describes the observation. This is important because
each mark that you see on a ggplot – a line, a point, a tile, … –
had to start out as a row within an R data.frame. The visual
properties of the mark (e.g., color) are determined by the values
along columns. These type of data are often referred to as tidy
data.</p>
  </li>
  <li>
    <p>Here’s an example of the data above in tidy format,</p>

    <p>This is one example of how the same information might be stored in a
non-tidy way, making visualization much harder.</p>

    <p>Often, one of the hardest parts in making a ggplot2 plot is not
coming up with the right ggplot2 commands, but reshaping the data so
that it’s in a tidy format.</p>
  </li>
  <li>
    <p><strong>Geometry</strong> The words in the grammar of graphics are the geometry
layers. We can associate each row of a data frame with points,
lines, tiles, etc., just by referring to the appropriate geom in
ggplot2. A typical plot will compose a chain of layers on top of a
dataset,</p>
  </li>
</ol>

<!-- -->

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  ggplot(data) + [layer 1] + [layer 2] + …
</code></pre></div></div>

<ol>
  <li>
    <p>For example, by deconstructing the plot above, we would expect to
have point and text layers. For now, let’s just tell the plot to put
all the geom’s at the origin. You can see all the types of geoms in
the cheat sheet. We’ll be experimenting with a few of these in a
later lecture.</p>
  </li>
  <li>
    <p><strong>Aesthetic Mapping</strong> Aesthetic mappings make the connection between
the data and the geometry. It’s the piece that translates abstract
data fields into visual properties. Analyzing the original graph, we
recognize these specific mappings.</p>

    <ul>
      <li>State Population → x-axis coordinate</li>
      <li>Number of murders → y-axis coordinate</li>
      <li>Geographical region → color</li>
    </ul>
  </li>
  <li>
    <p>To establish these mappings, we need to use the aes function. Notice
that column names don’t have to be quoted – ggplot2 knows to refer
back to the data.frame in ggplot(murders).</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ggplot(murders) +
  geom_point(aes(x = population, y = total, col = region))
</code></pre></div>    </div>

    <p><img src="/assets/week1/unnamed-chunk-3-1.png" alt="" /></p>
  </li>
  <li>
    <p>The original plot used a log-scale. To transform the x and y axes,
we can use scales.</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ggplot(murders) +
  geom_point(aes(x = population, y = total, col = region)) +
  scale_x_log10() +
  scale_y_log10()
</code></pre></div>    </div>

    <p><img src="/assets/week1/unnamed-chunk-4-1.png" alt="" /></p>

    <p>One nuance is that scales aren’t limited to x and y transformations.
They can be applied to modify any relationship between a data field
and its appearance on the page. For example, this changes the
mapping between the region field and circle color.</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ggplot(murders) +
  geom_point(aes(x = population, y = total, col = region)) +
  scale_x_log10() +
  scale_y_log10() +
  scale_color_manual(values = c("#6a4078", "#aa1518", "#9ecaf8", "#50838c"))
</code></pre></div>    </div>

    <p><img src="/assets/week1/unnamed-chunk-5-1.png" alt="" /></p>
  </li>
  <li>
    <p>A problem with this graph is that it doesn’t tell us which state
each point corresponds to. For that, we’ll need text labels. We can
encode the coordinates for these marks again using aes, but this
time within a <code class="language-plaintext highlighter-rouge">geom_text</code> layer.</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ggplot(murders) +
  geom_point(aes(x = population, y = total, col = region)) +
  geom_text(
    aes(x = population, y = total, label = abb),
    nudge_x = 0.08 # what would happen if I remove this?
  ) +
  scale_x_log10() +
  scale_y_log10()
</code></pre></div>    </div>

    <p><img src="/assets/week1/unnamed-chunk-6-1.png" alt="" /></p>

    <p>Note that each type of layer uses different visual properties to
encode the data – the argument label is only available for the
<code class="language-plaintext highlighter-rouge">geom_text</code> layer. You can see which aesthetic mappings are required
for each type of geom by checking that geom’s documentation page,
under the Aesthetics heading.</p>
  </li>
  <li>
    <p>It’s usually a good thing to make your code as concise as possible.
For ggplot2, we can achieve this by sharing elements across aes
calls (e.g., not having to type population and total twice). This
can be done by defining a “global” aesthetic, putting it inside the
initial ggplot call. We can also use the fact that the first two
arguments of <code class="language-plaintext highlighter-rouge">aes</code> are always the <code class="language-plaintext highlighter-rouge">x</code> and <code class="language-plaintext highlighter-rouge">y</code> positional mappings.</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ggplot(murders, aes(population, total)) +
  geom_point(aes(col = region)) +
  geom_text(aes(label = abb), nudge_x = 0.08) +
  scale_x_log10() +
  scale_y_log10()
</code></pre></div>    </div>

    <p><img src="/assets/week1/unnamed-chunk-7-1.png" alt="" /></p>
  </li>
  <li>
    <p>How can we improve the readability of this plot? You might already
have ideas,</p>

    <ul>
      <li>Prevent labels from overlapping. It’s impossible to read some of
the state names.</li>
      <li>Add a line showing the national rate. This serves as a point of
reference, allowing us to see whether an individual state is
above or below the national murder rate.</li>
      <li>Give meaningful axis / legend labels and a title.</li>
      <li>Move the legend to the top of the figure. Right now, we’re
wasting a lot of visual real estate in the right hand side, just
to let people know what each color means.</li>
      <li>Use a better color theme.</li>
    </ul>
  </li>
  <li>
    <p>For each of the problems above, we have the corresponding solution
techniques,</p>

    <ul>
      <li>The ggrepel package. This tries to find better label positions,
using lines when necessary.</li>
      <li>Use <code class="language-plaintext highlighter-rouge">geom_abline</code> to encode the national murder rate as the
slope and intercept in a line graph. All states would lie on
this line if their murder rate was equal to the national
average.</li>
      <li>Add a labs layer to write labels and a theme to reposition the
legend. I used <code class="language-plaintext highlighter-rouge">label_number</code> from the scales package to change
the scientific notation in the <em>x</em>-axis labels to something more
readable.</li>
      <li>I find the gray background with reference lines a bit
distracting. We can simplify the appearance using
<code class="language-plaintext highlighter-rouge">theme_minimal</code>. I also like the colorbrewer palette, which can
be used by calling a different color scale.</li>
    </ul>
  </li>
  <li>
    <p>Putting all these modifications together yields</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>r &lt;- murders %&gt;%
  summarize(rate = sum(total) /  sum(population)) %&gt;%
  pull(rate)

ggplot(murders, aes(population, total)) +
  geom_abline(intercept = log10(r), size = 0.4, col = "#b3b3b3") +
  geom_text_repel(aes(label = abb), segment.size = 0.2) +
  geom_point(aes(col = region)) +
  scale_x_log10(labels = label_number(scale_cut = cut_short_scale())) +
  scale_y_log10() +
  scale_color_brewer(palette = "Set2") +
  labs(
    x = "Population (log scale)",
    y = "Total number of murders (log scale)",
    color = "Region",
    title = "US Gun Murders in 2010"
  ) +
  theme_minimal()
</code></pre></div>    </div>

    <p><img src="/assets/week1/unnamed-chunk-8-1.png" alt="" /></p>
  </li>
</ol>]]></content><author><name></name></author><summary type="html"><![CDATA[Design principles from the grammar of graphics.]]></summary></entry></feed>